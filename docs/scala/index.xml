<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Scala on solareenlo</title><link>https://solareenlo.com/docs/scala/</link><description>Recent content in Scala on solareenlo</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://solareenlo.com/docs/scala/index.xml" rel="self" type="application/rss+xml"/><item><title>sbt</title><link>https://solareenlo.com/docs/scala/sbt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/scala/sbt/</guid><description>sbt 概要 Scala の標準的なビルドツール． GitHub: sbt/sbt WebSite: https://www.scala-sbt.org/ Docs-en: https://www.scala-sbt.org/1.x/docs/ Docs-ja: https://www.scala-sbt.org/release/docs/ja/index.html Docker で使う GitHub: hseeberger/scala-sbt GitHub: mozilla/docker-sbt image を build する docker build \ --build-arg BASE_IMAGE_TAG=&amp;#34;8u212-b04-jdk-stretch&amp;#34; \ --build-arg SBT_VERSION=&amp;#34;1.3.8&amp;#34; \ --build-arg SCALA_VERSION=&amp;#34;2.13.1&amp;#34; \ --build-arg USER_ID=1001 \ --build-arg GROUP_ID=1001 \ -t solareenlo/scala-sbt \ github.com/hseeberger/scala-sbt.git#:debian docker run # コンテナを走らせる sudo docker run -it --rm -v $(pwd):/root solareenlo/scala-sbt:latest bash sudo docker run -it --rm -v $(pwd):/root solareenlo/scala-sbt:latest scala sudo docker run -it --rm -v $(pwd):/root solareenlo/scala-sbt:latest sbt 使い方 sbt runMain TestStudy or</description></item><item><title>class</title><link>https://solareenlo.com/docs/scala/class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/scala/class/</guid><description>class scala における class とは，object を作るための設計図のこと． class はメソッド，値，変数，型，object，trait，class を持つ． 記法 ` ` &amp;hellip; アルファベットや記号の並び ( ) &amp;hellip; グルーピング &amp;lt; &amp;gt; &amp;hellip; 何らかの構文要素 * &amp;hellip; その要素が0回以上現れる + &amp;hellip; その要素が1回以上現れる ? &amp;hellip; その要素が0回または1回現れる A | B &amp;hellip; A と B のどちらでも良い ... &amp;hellip; 同じパターンで出現する 定義 クラス定義 class &amp;lt;クラス名&amp;gt; &amp;#39;(&amp;#39; (&amp;lt;引数名1&amp;gt; : &amp;lt;引数型1&amp;gt;, &amp;lt;引数名2&amp;gt;: &amp;lt;引数型2&amp;gt; ...)? &amp;#39;)&amp;#39; { (&amp;lt;フィールド定義&amp;gt; | &amp;lt;メソッド定義&amp;gt; )* } メソッド定義 メソッド： class や object 内の操作のこと．</description></item><item><title>object</title><link>https://solareenlo.com/docs/scala/object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/scala/object/</guid><description>object scala では1つのインスタンスを持つ class のこと． 別の言い方をすると，object で宣言された class からは，1つのインスタンスしか生成することができない． これをシングルトンオブジェクトという． 定義 object &amp;lt;オブジェクト名&amp;gt; extends &amp;lt;クラス名&amp;gt; (with &amp;lt;トレイト名&amp;gt;)* { (&amp;lt;フィールド定義&amp;gt; | &amp;lt;メソッド定義&amp;gt;)* } コンパニオンオブジェクト class と同じファイル内，同じ名前で定義されたシングルトンオブジェクトのこと． コンパニオンオブジェクトは対応する class に対して特権的なアクセス権を有している． class 内の privete にアクセスできる． class 内の privete[this] にはアクセスできない．</description></item><item><title>trait</title><link>https://solareenlo.com/docs/scala/trait/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/scala/trait/</guid><description>trait scala のオブジェクト指向プログラミングにおけるモジュール化の中心的な概念． class に近い機能を持ちながら実質的な多重継承が可能． 定義 trait &amp;lt;トレイト名&amp;gt; { (&amp;lt;フィールド定義&amp;gt; | &amp;lt;メソッド定義&amp;gt;)* } 主な特徴 複数の trait を1つの class や trait に mixin できる． 直接インスタンス化できない． これは trait が単体で使われることを想定しないため． クラスパラメータ（コンストラクタの引数）を取ることができない． trait に抽象メンバーを持たせることで値を渡すことができる． trait を class に継承させたり，インスタンス化のときに抽象メンバーを実装することで trait に値を渡すことができる．</description></item><item><title>type parameter</title><link>https://solareenlo.com/docs/scala/type-parameter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/scala/type-parameter/</guid><description>型パラメータ（type parameter） class を作る時点では何の type か特定できない場合に用いる． どの type でも同じ処理を抽象化できる． 定義 class &amp;lt;クラス名&amp;gt;[&amp;lt;型パラメータ1&amp;gt;, &amp;lt;型パラメータ2&amp;gt;, ...](&amp;lt;クラス引数&amp;gt;) { (&amp;lt;フィールド定義&amp;gt;|&amp;lt;メソッド定義&amp;gt;)* } Tuple1 ~ Tuple22 Tuple1 ~ Tuple22 （数字は要素数）とは，複数の引数を操作するあらかじめ用意された便利なクラスのこと． val m = 7 val n = 3 // 下の2つは同じこと new Tuple2(m / n, m % n) (m / n, m % n) // (Int, Int) = (2, 1) 変位指定（variance） 非変（invariant） Scala は基本的に型パラーメータは非変（invariant）． 下記の場合に A と B の型が一致していないといけない． val: G[A] = G[B] 共変（covariant） class G[+A] val: G[B] = G[A] A は B を継承していないといけない． 反変（contravariant） class G[-A] val: G[A] = G[B] A は B を継承していないといけない． わかりやすい例は関数の型． 関数の引数の型は戻り値の型を継承していなくてはならない． 型パラメータの境界（bounds） 上限境界（upper bounds） 自分がどのような型を継承しているかを指定するもの． 対象の型（自分）を別の型のサブタイプに制限するもの． 自分 &amp;lt;: 上限の型 下限境界（lower bounds） 自分がどのような型のスーパータイプであるかを指定するもの． 対象の型（自分）が別の型のスーパータイプであることを宣言するもの． 下限の型 &amp;gt;: 自分</description></item><item><title>function</title><link>https://solareenlo.com/docs/scala/function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/scala/function/</guid><description>関数 Scala の関数は単に，Function0 ~ Function22 までのトレイトの無名サブクラスのインスタンスを作っているだけ． よって，引数の最大個数は22個である． Function0 ~ Function22 までの全ての関数は引数の数に応じた apply メソッドを定義する必要がある． apply メソッドは Scala のコンパイラから特別扱いされ，x.apply(y) は x(y) のように書くことができる． Scala では Function0 ~ Function22 までのトレイトのインスタンスを生成するためのシンタックスシュガーが用意されている． // 下の2つは同じ扱いになる val add = new Function2[Int, Int, Int] { def apply(x: Int, y: Int): Int = x + y } val add = (x: Int, y: Int) =&amp;gt; x + y // 上のシンタックスシュガー // 下の2つは同じこと add.apply(10, 20) add.</description></item></channel></rss>